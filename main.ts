namespace SpriteKind {
    export const ReturningProjectile = SpriteKind.create()
}
sprites.onDestroyed(SpriteKind.ReturningProjectile, function (sprite) {
    numHats += 1
})
controller.A.onEvent(ControllerButtonEvent.Pressed, function () {
    if (0 < numHats) {
        projectile = sprites.createProjectileFromSprite(img`
            . . . . c c c c c c c . . . . . 
            . . c c 4 2 2 2 2 2 4 c c . . . 
            . c 4 2 2 2 1 1 2 2 2 2 2 c . . 
            . c 4 2 2 1 1 1 1 2 2 2 2 c . . 
            c 4 2 2 2 2 1 1 d 2 2 2 2 2 c . 
            c 2 2 2 2 2 1 d 2 2 2 2 2 2 c . 
            c 2 2 2 2 2 2 2 2 2 2 2 2 2 c . 
            c 2 2 2 2 2 2 2 2 2 2 2 1 1 c . 
            c 2 2 2 2 2 2 2 2 2 2 1 1 d c . 
            c 2 2 2 2 2 2 2 2 2 2 1 d 2 c . 
            c 4 2 2 2 1 1 1 2 2 2 2 2 a c . 
            . c 2 2 2 1 1 1 2 2 2 2 2 c . . 
            . c 4 2 2 1 1 1 d 2 2 2 a c . . 
            . . c c 2 2 1 1 d 2 a c c . . . 
            . . . . c c c c c c c . . . . . 
            . . . . . . . . . . . . . . . . 
            `, mySprite, lastVx, lastVy)
        projectile.setFlag(SpriteFlag.DestroyOnWall, false)
        projectile.setFlag(SpriteFlag.BounceOnWall, true)
        sprites.setDataNumber(projectile, "bounces", 3)
        numHats += -1
    }
})
sprites.onOverlap(SpriteKind.Player, SpriteKind.ReturningProjectile, function (sprite, otherSprite) {
    otherSprite.destroy()
})
function distance (a: Sprite, b: Sprite) {
    return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2)
}
scene.onHitWall(SpriteKind.Projectile, function (sprite, location) {
    if (sprites.readDataNumber(sprite, "bounces") == 0) {
        sprite.follow(mySprite, 300)
        sprite.setKind(SpriteKind.ReturningProjectile)
        sprite.lifespan = 2000
    } else {
        sprites.changeDataNumberBy(sprite, "bounces", -1)
        timer.background(function () {
            change = randint(-10, 10)
            sprite.vx += change
            sprite.vy += 0 - change
        })
    }
})
sprites.onDestroyed(SpriteKind.Projectile, function (sprite) {
    numHats += 1
})
let change = 0
let lastVy = 0
let lastVx = 0
let projectile: Sprite = null
let e: Sprite = null
let numHats = 0
let mySprite: Sprite = null
mySprite = sprites.create(img`
    . . . . . . b b b b . . . . . . 
    . . . . b b 3 3 3 3 b b . . . . 
    . . . c b 3 3 3 3 1 1 b c . . . 
    . . c b 3 3 3 3 3 1 1 1 b c . . 
    . c c 1 1 1 3 3 3 3 1 1 3 c c . 
    c c d 1 1 1 3 3 3 3 3 3 3 b c c 
    c b d d 1 3 3 3 3 3 1 1 1 b b c 
    c b b b 3 3 1 1 3 3 1 1 d d b c 
    c b b b b d d 1 1 3 b d d d b c 
    . c b b b b d d b b b b b b c . 
    . . c c b b b b b b b b c c . . 
    . . . . c c c c c c c c . . . . 
    . . . . . . b 1 1 b . . . . . . 
    . . . . . . b 1 1 b b . . . . . 
    . . . . . b b d 1 1 b . . . . . 
    . . . . . b d d 1 1 b . . . . . 
    `, SpriteKind.Player)
controller.moveSprite(mySprite)
tiles.setTilemap(tilemap`level`)
numHats = 1
for (let index = 0; index <= 1; index++) {
    e = sprites.create(img`
        ........................
        ........................
        ........................
        ........................
        ..........ffff..........
        ........ff1111ff........
        .......fb111111bf.......
        .......f11111111f.......
        ......fd11111111df......
        ......fd11111111df......
        ......fddd1111dddf......
        ......fbdbfddfbdbf......
        ......fcdcf11fcdcf......
        .......fb111111bf.......
        ......fffcdb1bdffff.....
        ....fc111cbfbfc111cf....
        ....f1b1b1ffff1b1b1f....
        ....fbfbffffffbfbfbf....
        .........ffffff.........
        ...........fff..........
        ........................
        ........................
        ........................
        ........................
        `, SpriteKind.Enemy)
    tiles.placeOnRandomTile(e, myTiles.transparency16)
    sprites.setDataString(e, "index", "skelly" + index)
}
game.onUpdate(function () {
    if (0 < Math.abs(mySprite.vx) || 0 < Math.abs(mySprite.vy)) {
        lastVx = mySprite.vx * 3
        lastVy = mySprite.vy * 3
    }
})
game.onUpdateInterval(100, function () {
    for (let value of sprites.allOfKind(SpriteKind.Enemy)) {
        if (projectile && value.overlapsWith(projectile)) {
            value.setImage(img`
                ........................
                ........................
                ........................
                ..........2222..........
                ........22ffff22........
                .......2ff1111ff2.......
                ......2fb111111bf2......
                ......2f11111111f2......
                .....2fd11111111df2.....
                .....2fd11111111df2.....
                .....2fddd1111dddf2.....
                .....2fbdbfddfbdbf2.....
                .....2fcdcf11fcdcf2.....
                ......2fb111111bf2......
                ....22fffcdb1bdffff2....
                ...2fc111cbfbfc111cf2...
                ...2f1b1b1ffff1b1b1f2...
                ...2fbfbffffffbfbfbf2...
                ....22222ffffff22222....
                .........22fff2.........
                ...........222..........
                ........................
                ........................
                ........................
                `)
            timer.throttle(sprites.readDataString(value, "index"), 500, function () {
                value.x += projectile.vx / 50
                value.y += projectile.vy / 50
            })
        } else if (distance(value, mySprite) < 32) {
            value.setImage(img`
                ........................
                ........................
                ........................
                ..........5555..........
                ........55ffff55........
                .......5ff1111ff5.......
                ......5fb111111bf5......
                ......5f11111111f5......
                .....5fd11111111df5.....
                .....5fd11111111df5.....
                .....5fddd1111dddf5.....
                .....5fbdb2dd2bdbf5.....
                .....5fcdc2112cdcf5.....
                ......5fb111111bf5......
                ....55fffcdb1bdffff5....
                ...5fc111cbfbfc111cf5...
                ...5f1b1b1ffff1b1b1f5...
                ...5fbfbffffffbfbfbf5...
                ....55555ffffff55555....
                .........55fff5.........
                ...........555..........
                ........................
                ........................
                ........................
                `)
        } else {
            value.setImage(img`
                ........................
                ........................
                ........................
                ........................
                ..........ffff..........
                ........ff1111ff........
                .......fb111111bf.......
                .......f11111111f.......
                ......fd11111111df......
                ......fd11111111df......
                ......fddd1111dddf......
                ......fbdbfddfbdbf......
                ......fcdcf11fcdcf......
                .......fb111111bf.......
                ......fffcdb1bdffff.....
                ....fc111cbfbfc111cf....
                ....f1b1b1ffff1b1b1f....
                ....fbfbffffffbfbfbf....
                .........ffffff.........
                ...........fff..........
                ........................
                ........................
                ........................
                ........................
                `)
        }
    }
})
